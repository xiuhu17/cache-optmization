we read from the 
                regfile & rob & cdb when the instruction is issued
                
                consider the dependencies between multi-issued instructions
                    add x2, x2, x2, rob 0  add x2, x2(rob0), x2(rob0)
                    what is the real rob number for each rs slot?
                    what if the previous instruction isnt a write to regfile

                    add x2 x2 x2 , add x2 x2 x2 ,add x2 x2 x2 ,add x2 x2 x2 , 
                    what the dependency would be like in this situation?

                if cdb write to rob, instruction issue write to rob, rob committed happens in the same cycle
                consider the transparent read/write register
                    when current cdb is: rob0, x2, 1; the scoreboard is: x2, rob0, valid; if we issue an instruction
                    add x2, x2, x3, we need to: 
                                                -- lookup the scoreboard 
                                                    if scoreboard is invalid 
                                                        read data from the regfile
                                                    else 
                                                        get rob index
                                                        if current cdb is writing to rob index
                                                            read data 
                                                        else 
                                                            read data from rob
                                                                if rob is ready 
                                                                    read data 
                                                                else 
                                                                    wait for future cdb

                                                -- 
                                                    also notice: each time we need to lookup scoreboard before overwrite it 
                                                    (protect by ff logic)
                consider the cdb bus is available when the instructio is currently issued


                transparent register issue:
                    rob0 x2 1 is currently committed
                    x2 2 rob0
                    ---> 
                    x2 1 

                    rob0 x2 1 is curretnly committed 
                    x2 2 rob1
                    --->
                    x2 1 rob1

                    add x2 x2 x2 
                


For instruction queue || ROB, we assume the the     

    input logic instr_push,
    input logic instr_pop[SUPERSCALAR],

    input logic rob_push[SUPERSCALAR],
    input logic rob_pop[SUPERSCALAR]

are always correct, based on

    push: output logic instr_full, 
    pop: output logic instr_valid_out[SUPERSCALAR],

    

